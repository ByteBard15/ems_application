name: Run local CI

on:
  push:
    branches:
      - 'master'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Cache Gradle wrapper and caches
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Print workspace
        run: pwd && ls -la

      - name: Run tests
        run: ./gradlew clean test --no-daemon

  deploy:
    runs-on: ubuntu-latest
    needs: test
    env:
      RABBITMQ_VIRTUAL_HOST: ${{ env.RABBITMQ_VIRTUAL_HOST }}
      RABBITMQ_USER_EVENTS_QUEUE: ${{ env.RABBITMQ_USER_EVENTS_QUEUE }}
      RABBITMQ_PASSWORD: ${{ env.RABBITMQ_PASSWORD }}
      RABBITMQ_PORT: ${{ env.RABBITMQ_PORT }}
      RABBITMQ_DL_EVENTS_QUEUE: ${{ env.RABBITMQ_DL_EVENTS_QUEUE }}
      RABBITMQ_DL_EXCHANGE: ${{ env.RABBITMQ_DL_EXCHANGE }}
      RABBITMQ_USERNAME: ${{ env.RABBITMQ_USERNAME }}
      RABBITMQ_MAIN_EXCHANGE: ${{ env.RABBITMQ_MAIN_EXCHANGE }}
      RABBITMQ_HOST: ${{ env.RABBITMQ_HOST }}

      # Service Ports
      CONFIG_SERVICE_PORT: ${{ env.CONFIG_SERVICE_PORT }}
      GATEWAY_SERVICE_PORT: ${{ env.GATEWAY_SERVICE_PORT }}
      AUTH_SERVICE_PORT: ${{ env.AUTH_SERVICE_PORT }}
      DISCOVERY_SERVICE_PORT: ${{ env.DISCOVERY_SERVICE_PORT }}
      EMPLOYEE_SERVICE_PORT: ${{ env.EMPLOYEE_SERVICE_PORT }}

      # Database Configuration
      DB_PORT: ${{ env.DB_PORT }}
      DB_NAME: ${{ env.DB_NAME }}
      DB_USERNAME: ${{ env.DB_USERNAME }}
      DB_PASSWORD: ${{ env.DB_PASSWORD }}
      DB_POOL_SIZE: ${{ env.DB_POOL_SIZE }}
      DB_HOST: ${{ env.DB_HOST }}

      # JWT Configuration
      JWT_ISSUER: ${{ env.JWT_ISSUER }}
      JWT_SECRET: ${{ env.JWT_SECRET }}
      JWT_EXPIRATION_IN_HOURS: ${{ env.JWT_EXPIRATION_IN_HOURS }}

      # Network & Discovery
      NETWORK_HOST: ${{ env.NETWORK_HOST }}
      DISCOVERY_SERVICE_URL: ${{ env.DISCOVERY_SERVICE_URL }}

      # Git Configuration
      GIT_REPO_LINK: ${{ env.GIT_REPO_LINK }}

      # Application Configuration
      LOG_LEVEL: ${{ env.LOG_LEVEL }}
      DEFAULT_PASSWORD: ${{ env.DEFAULT_PASSWORD }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Cache Gradle wrapper and caches
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Bootstrap shared config
        run: |
          ./gradlew --include-build bootstrap :bootstrap:createGitConfig --info -PuseEnv=true --no-daemon
          if [ ! -f default.env ]; then
            echo "::error::default.env was not created"
            exit 1
          fi
          echo "default.env created:"
          cat default.env

      - name: Source default.env and validate variables
        run: |
          set -a
          source ./default.env
          set +a
          
          # List of required variables
          REQUIRED_VARS=(
            "AUTH_SERVICE_PORT"
            "CONFIG_SERVICE_PORT"
            "DB_HOST"
            "DB_NAME"
            "DB_PASSWORD"
            "DB_POOL_SIZE"
            "DB_PORT"
            "DB_USERNAME"
            "DEFAULT_PASSWORD"
            "DISCOVERY_SERVICE_PORT"
            "DISCOVERY_SERVICE_URL"
            "EMPLOYEE_SERVICE_PORT"
            "GATEWAY_SERVICE_PORT"
            "GIT_REPO_LINK"
            "JWT_EXPIRATION_IN_HOURS"
            "JWT_ISSUER"
            "JWT_SECRET"
            "LOG_LEVEL"
            "NETWORK_HOST"
            "RABBITMQ_DL_EVENTS_QUEUE"
            "RABBITMQ_DL_EXCHANGE"
            "RABBITMQ_HOST"
            "RABBITMQ_MAIN_EXCHANGE"
            "RABBITMQ_PASSWORD"
            "RABBITMQ_PORT"
            "RABBITMQ_USER_EVENTS_QUEUE"
            "RABBITMQ_USERNAME"
            "RABBITMQ_VIRTUAL_HOST"
          )
          
          # Validate each variable
          for var in "${REQUIRED_VARS[@]}"; do
            if [ -z "${!var}" ]; then
              echo "::error::Required environment variable $var is not set"
              exit 1
            fi
            echo "âœ“ $var is set"
          done

      - name: Run Flyway create
        run: ./flyway/create

      - name: Run Flyway migrate
        run: ./flyway/migrate

      - name: Build Docker Compose services
        run: docker-compose build

      - name: Start Docker Compose services
        run: docker-compose up -d

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for services to start..."
          sleep 30
          
          # Check if containers are running
          docker-compose ps
          
          # Check logs for any errors
          echo "=== Discovery Service Logs ==="
          docker-compose logs discovery-service | tail -n 50
          
          echo "=== Gateway Service Logs ==="
          docker-compose logs gateway-service | tail -n 50
