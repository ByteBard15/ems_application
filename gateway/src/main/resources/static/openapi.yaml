openapi: 3.0.3
info:
  title: Employee API
  version: 1.0.0
  description: API for managing authentication, users, and departments in the Trade Bay application
paths:
  /api/v1/auth/login:
    post:
      summary: User login
      description: Authenticates a user and returns a token and user details
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MvcApiResponseLoginResponse'
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MvcApiResponseError'
  /api/v1/auth/change-password:
    post:
      summary: Change user password
      description: Changes the password for a user
      operationId: changePassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MvcApiResponseObject'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MvcApiResponseError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MvcApiResponseError'
  /api/v1/users:
    post:
      summary: Create a new user
      description: Creates a new user based on the provided details
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MutateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MvcApiResponseUserDTO'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MvcApiResponseError'
    get:
      summary: Get all users
      description: Retrieves a paginated list of all users
      operationId: getAllUsers
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: size
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MvcApiResponseUserDTOList'
  /api/v1/users/{id}:
    get:
      summary: Get a user by ID
      description: Retrieves a user by their ID
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MvcApiResponseUserDTO'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MvcApiResponseError'
    put:
      summary: Update an existing user
      description: Updates a user by ID
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MutateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MvcApiResponseUserDTO'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MvcApiResponseError'
    delete:
      summary: Delete a user
      description: Deletes a user by their ID
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MvcApiResponseObject'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MvcApiResponseError'
  /api/v1/departments:
    post:
      summary: Create a new department
      description: Creates a new department based on the provided details
      operationId: createDepartment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MutateDepartmentRequest'
      responses:
        '201':
          description: Department created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MvcApiResponseDepartmentDTO'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MvcApiResponseError'
    get:
      summary: Get all departments
      description: Retrieves a paginated list of all departments
      operationId: getAllDepartments
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: size
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Departments retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MvcApiResponseDepartmentDTOList'
  /api/v1/departments/{id}:
    get:
      summary: Get a department by ID
      description: Retrieves a department by its ID
      operationId: getDepartmentById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Department retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MvcApiResponseDepartmentDTO'
        '404':
          description: Department not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MvcApiResponseError'
    put:
      summary: Update an existing department
      description: Updates a department by ID
      operationId: updateDepartment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MutateDepartmentRequest'
      responses:
        '200':
          description: Department updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MvcApiResponseDepartmentDTO'
        '404':
          description: Department not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MvcApiResponseError'
    delete:
      summary: Delete a department
      description: Deletes a department by its ID
      operationId: deleteDepartment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Department deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MvcApiResponseObject'
        '404':
          description: Department not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MvcApiResponseError'
components:
  schemas:
    UserDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        status:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - firstName
        - lastName
        - email
        - status
        - createdAt
    DepartmentDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      required:
        - id
        - name
    MutateUserRequest:
      type: object
      properties:
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
      required:
        - email
        - firstName
        - lastName
        - role
    MutateDepartmentRequest:
      type: object
      properties:
        name:
          type: string
      required:
        - name
    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    ChangePasswordRequest:
      type: object
      properties:
        email:
          type: string
        oldPassword:
          type: string
        newPassword:
          type: string
      required:
        - email
        - oldPassword
        - newPassword
    LoginResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/UserDTO'
      required:
        - token
        - user
    MvcApiResponseUserDTO:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/UserDTO'
        status:
          type: integer
        success:
          type: boolean
        message:
          type: string
      required:
        - status
        - success
    MvcApiResponseUserDTOList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserDTO'
        status:
          type: integer
        success:
          type: boolean
        message:
          type: string
      required:
        - status
        - success
    MvcApiResponseDepartmentDTO:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/DepartmentDTO'
        status:
          type: integer
        success:
          type: boolean
        message:
          type: string
      required:
        - status
        - success
    MvcApiResponseDepartmentDTOList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/DepartmentDTO'
        status:
          type: integer
        success:
          type: boolean
        message:
          type: string
      required:
        - status
        - success
    MvcApiResponseLoginResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/LoginResponse'
        status:
          type: integer
        success:
          type: boolean
        message:
          type: string
      required:
        - status
        - success
    MvcApiResponseObject:
      type: object
      properties:
        data:
          type: object
          nullable: true
        status:
          type: integer
        success:
          type: boolean
        message:
          type: string
      required:
        - status
        - success
    MvcApiResponseError:
      type: object
      properties:
        data:
          type: object
          nullable: true
        status:
          type: integer
        success:
          type: boolean
        message:
          type: string
      required:
        - status
        - success
        - message